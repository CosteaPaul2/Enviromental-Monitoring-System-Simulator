// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessTokens    AccessToken[]
  sensors   Sensor[]
  shapes    Shape[]
}

model AccessToken {
  id         Int       @id @default(autoincrement())
  userId     String
  name       String 
  hash       String    @unique 
  abilities  String[]  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime?
  lastUsedAt DateTime? 
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([hash])
  @@index([userId])
}

model Sensor {
  id Int @id @default(autoincrement())
  sensorId String @unique
  type SensorType
  active Boolean @default(false)
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  location Unsupported("geometry(Point, 4326)")?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  readings SensorReading[]

  @@index([location], name:"sensor_location_index", type: Gist)

}

model SensorReading {
  id Int @id @default(autoincrement())
  sensorId Int
  timestamp DateTime @default(now())
  value Float
  unit SensorUnit
  sensor Sensor @relation(fields: [sensorId], references: [id], onDelete: Cascade)
}

model Shape {
  id Int @id @default(autoincrement())
  name String
  type ShapeType
  geometry Unsupported("geometry(Geometry, 4326)")
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([geometry], name:"shape_geometry_index", type: Gist)
  @@index([userId])
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  AIR_QUALITY
  LIGHT
  NOISE
  CO2
}

enum SensorUnit {
  CELSIUS
  FAHRENHEIT
  RH_PERCENTAGE
  PPM
  LUX
  DB
}

enum ShapeType {
  CIRCLE
  RECTANGLE
  POLYGON
}

enum UserRole {
  USER
  ADMIN
}